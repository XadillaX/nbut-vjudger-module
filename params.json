{"name":"VJudge Submitter","tagline":"The submitter library for NODE.JS to work with Virtual Judge System.","body":"### WELCOME TO USE VJUDGE SUBMITTER\r\n\r\nIt's easy to use ***VJudge Submitter*** in your own ***Virtual Judge*** project.\r\n\r\nFirst of all, come to your project directory and create a new directory if it not exists yet:\r\n\r\n```bash\r\nmkdir node_modules\r\n```\r\n\r\nAnd then you can clone the ***VJudge Submitter*** to that directory or uncompress it via the package you downloaded:\r\n\r\n```bash\r\ngit clone https://github.com/XadillaX/vjudge-submitter.git\r\n```\r\n\r\nor\r\n\r\n```bash\r\ntar zxf filename.tar.gz\r\n```\r\n\r\nCongratulations! Now you can use it in your own project!\r\n\r\n### HOW TO USE IT?\r\n\r\n#### CREATE\r\n\r\nYou need get a submitter that ***VJudge Submitter*** supported. (You can view it in the [supported list](#supported-list))\r\n\r\n```js\r\nvar vjs = require(\"vjudge-submitter\");\r\nvar foo = vjs.getSubmitter(\"online judge name\");\r\n```\r\n\r\nYou can change the logger level:\r\n\r\n```js\r\nvjs.setDefaultLogLevel(\"TRACE|DEBUG|INFO|WARNING|ERROR|FATAL\");\r\n```\r\n\r\n> **IMPORTANT**: It just influence the submitter after calling this function.\r\n\r\n#### LOGIN\r\n\r\nThe `login` function is very simple:\r\n\r\n```js\r\nfoo.login(username, password, callback);\r\n```\r\n\r\nThe only thing you shold care is the `callback`, it should be written like that:\r\n\r\n```js\r\nfunction callback(status, msg, baseheader) {\r\n   //blahblah...\r\n}\r\n```\r\n\r\nThe parameter are:\r\n\r\n  + **status**: returns `true` when successfully and `false` when failed.\r\n  + **msg**: it will be an empty string when successfully and it will be the **error message** when failed.\r\n  + **baseheader**: this parameter will be used in `submit` or `result` function. Most importantly, this parameter includes the cookie information.\r\n\r\n#### SUBMIT\r\n\r\nRefer to the code below:\r\n\r\n```js\r\nfoo.submit(problemID, language, code, baseheader, callback);\r\n```\r\n\r\n> **Hint**: The `baseheader` here is the `baseheader` passed from the callback function of `login` function.\r\n\r\nAnd the callback function of `submit` should be like:\r\n\r\n```js\r\nfunction callback(status, msg, baseheader) {\r\n    //blahblah...\r\n}\r\n```\r\n\r\nIt's similar to the callback function of `login` callback function's.\r\n\r\n#### RESULT\r\n\r\nThis function is to fetch the running record of ***last*** submission. (Because we assume one **Virtual Judge Account** just doing one thing at one moment)\r\n\r\n```js\r\nfoo.result(username, baseheader, callback);\r\n```\r\n\r\nBecause we would like to fetch the `COMPILATION_ERROR` if the record is that, we must logged in. As a result, we should pass the cookie information into the function - that is the `baseheader`.\r\n\r\nAnd the callback function should be written like:\r\n\r\n```js\r\nfunction callback(status, msg, result) {\r\n    //blahblah...\r\n}\r\n```\r\n\r\n> **NOTE**: This callback maybe called several times.\r\n>\r\n> + When the result is something like `COMPILING`, `RUNNING`, `QUEUING`, etc, the callback function will pass `false`, msg and the result is a `result object`.\r\n> + When the fetching is wrong like `CONNECTION ERROR`, etc, the callback function will pass `false`, msg and the result is `null`. (It often happened when the submitter tries too many times but can't get the right information)\r\n> + When the fetching is right, the callback function will pass `true`, msg and the result is a `result object`.\r\n\r\nThe so-called `result object` is something like:\r\n\r\n```js\r\nresult = {\r\n    runid    : \"The running id\",\r\n    time     : \"The running time\",\r\n    memo     : \"The running memory\",\r\n    result   : \"The result in that oj\",\r\n    finalresult : \"The result after formatting\"\r\n};\r\n```\r\n\r\n#### A SIMPLEST EXAMPLE\r\n\r\nYou can refer to the simplest example:\r\n\r\n```js\r\nvar vjs = require(\"vjudge-submitter\");\r\nvjs.setDefaultLogLevel(\"INFO\");\r\nvar username = \"username\";\r\nvar password = \"password\";\r\nvar code = \"blahblah...\";\r\n\r\nvar nbut = vjs.getSubmitter(\"nbut\");\r\nnbut.login(username, password, function(status, msg, baseheader) {\r\n    // Something goes wrong.\r\n    if(!status) {\r\n        this.logger.error(msg);\r\n        return;\r\n    }\r\n\r\n    this.submit(\"1000\", \"C++\", code, function(status, msg, baseheader) {\r\n        // Something goes wrong\r\n        if(!status) {\r\n            this.logger.error(msg);\r\n            return;\r\n        }\r\n\r\n        this.result(username, \"1000\", function(status, msg, result) {\r\n            // Something goes wrong\r\n            if(!status && null === result) {\r\n                this.logger.error(msg);\r\n                return;\r\n            }\r\n\r\n            // PENDING\r\n            if(!status) {\r\n                var text = \"The code status is still [ \" + result[\"finalresult\"] + \" ]. Please wait.\";\r\n                this.logger.info(text);\r\n                return;\r\n            }\r\n\r\n            var text = \"The code status is finished in \" + result[\"time\"] + \"ms and \" + result[\"memo\"] + \"K with [ \" + result[\"finalresult\"] + \" ]\";\r\n            this.logger.info(text);\r\n\r\n            // The status is COMPILATION ERROR\r\n            if(undefined !== result[\"ceinfo\"]) {\r\n                text = \"And the CE information is:\\n\";\r\n                text += result[\"ceinfo\"];\r\n                this.logger.info(text); \r\n            }\r\n        });\r\n    });\r\n});\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}